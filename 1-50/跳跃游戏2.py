#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# 跳跃游戏2.py
"""
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:
输入: [2,3,1,1,4]
输出: 2

解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。

说明:
假设你总是可以到达数组的最后一个位置。
"""
"""
思路：贪心法，贪最远距离，每一次从第一个位置开始遍历到最远距离，比较最远距离与某个位置加上其数值。
选择最大的，当最远距离大于了目标位置则停止，此时为最小次数，最远值大于目标值是可以的，因为在数值范围内跳。
"""
__author__ = 'Aiyane'
import profile


class Solution:
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        i = cur = res = 0
        n = len(nums)
        while cur < n - 1:
            res += 1
            pre = cur
            for j in range(i, pre+1):
                cur = max(cur, j + nums[j])
        return res


def main():
    sol = Solution()
    print(sol.jump([8,2,4,4,4,9,5,2,5,8,8,0,8,6,9,1,1,6,3,5,1,2,6,6,0,4,8,6,0,3,2,8,7,6,5,1,7,0,3,4,8,3,5,9,0,4,0,1,0,5,9,2,0,7,0,2,1,0,8,2,5,1,2,3,9,7,4,7,0,0,1,8,5,6,7,5,1,9,9,3,5,0,7,5]))
    # print(sol.jump([5,6,4,4,6,9,4,4,7,4,4,8,2,6,8,1,5,9,6,5,2,7,9,7,9,6,9,4,1,6,8,8,4,4,2,0,3,8,5]))


if __name__ == '__main__':
    profile.run('main()')
    # main()
