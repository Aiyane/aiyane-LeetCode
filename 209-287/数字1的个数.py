#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# 数字1的个数.py
"""
给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。

示例:
输入: 13
输出: 6 
解释: 数字 1 出现在以下数字中: 1, 10, 11, 12, 13 。
"""
"""
思路：
[0, 9]:1 (0 + 1)
[10, 19]:11 (0 + 1) + 10
[20, 29]:1 (0 + 1)
[30, 39]:1 (0 + 1)
...
[90, 99]:1 (0 + 1)
--------------
[100, 109]:11 (10 + 1)
[110, 119]:21 (10 + 1) + 10
[120, 129]:11 (10 + 1)
...
[190, 199]:11 (10 + 1)

--------------
k 表示位数，每 10 个数有 1 个，每 100 个数有 10 个，每 1000 个数有 100 个。
但如果高位是 1，例如 103，高位是 1 开头，那么该位出现的 1 的个数将加上余数个数 + 1。
"""
__author__ = 'Aiyane'


class Solution:
    def countDigitOne(self, n):
        """
        :type n: int
        :rtype: int
        """
        res = 0
        k = 1
        while k <= n:
            r, m = divmod(n, k)
            # k 位上 1 的个数，大于 2 时增加 1 个数
            tmp1 = (r + 8) // 10 * k
            # 高位 1 的个数
            tmp2 = m + 1 if r % 10 == 1 else 0
            res += tmp1 + tmp2
            k *= 10
        return res

sol = Solution()
sol.countDigitOne(128)
